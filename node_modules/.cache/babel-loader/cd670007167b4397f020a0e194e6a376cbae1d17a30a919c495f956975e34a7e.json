{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Altamir\\\\Desktop\\\\Projetos\\\\ReactJS\\\\lista-de-contatos\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Listas from \"./listaContato\";\nimport { v4 as chave } from 'uuid';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  //states\n  const [contato, setContato] = useState({\n    nome: \"\",\n    telefone: \"\"\n  });\n  const [listaContato, setListaContato] = useState([]);\n  const nomeRef = useRef();\n  const telefoneRef = useRef();\n\n  //testando o código \n  const [novinha, setNovinha] = useState('');\n  const cabeçaref = useRef();\n  const algalrinnha = useRef();\n  const agoravai = useRef();\n\n  //metodos\n  function definirNome(evento) {\n    setContato({\n      ...contato,\n      nome: evento.target.value\n    });\n  }\n  function definirTelefone(evento) {\n    setContato({\n      ...contato,\n      telefone: evento.target.value\n    });\n  }\n  function adicionarContato() {\n    if (contato.nome === \"\" || contato.telefone === \"\") return;\n\n    // contato duplicado\n    let duplicado = listaContato.find(ct => ct.nome === contato.nome && ct.telefone === contato.telefone);\n    if (typeof duplicado !== \"undefined\") {\n      telefoneRef.current.focus();\n      return;\n    }\n    setListaContato([...listaContato, contato]);\n\n    //limpar contato\n    setContato({\n      nome: \" \",\n      telefone: \" \"\n    });\n\n    //focus no input nome\n    nomeRef.current.focus();\n  }\n\n  // Utilizado o enter\n  function adicionarEnter(evento) {\n    if (evento.code === \"Enter\" || evento.code === \"NumpadEnter\") {\n      adicionarContato();\n    }\n  }\n\n  // carregar lista de contato localstorage\n  useEffect(() => {\n    if (localStorage.getItem(\"meus_contatos\") !== null) {\n      setListaContato(JSON.parse(localStorage.getItem(\"meus_contatos\")));\n    }\n  }, []);\n  // persistencia do state\n  useEffect(() => {\n    localStorage.setItem(\"meus_contatos\", JSON.stringify(listaContato));\n  }, [listaContato]);\n  // limpar contatos\n  function limparContatos() {\n    setListaContato([]);\n  }\n\n  // remover contato por objeto\n  function removerContato(ctRemover) {\n    let tmp = listaContato.filter(ct => ct.nome !== ctRemover.nome && ct.telefone !== ctRemover.telefone);\n    setListaContato(tmp);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"text-center p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Lista de contatos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid p-3 adicionar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Nome: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 44\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control \",\n          ref: nomeRef,\n          type: \"text\",\n          onChange: definirNome,\n          value: contato.nome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Telefone: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 48\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control \",\n          ref: telefoneRef,\n          type: \"text\",\n          onChange: definirTelefone,\n          value: contato.telefone,\n          onKeyUp: adicionarEnter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: adicionarContato,\n        children: \"Adicionar contato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: limparContatos,\n        children: \"Limpar contatos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), listaContato.map(ct => {\n      return /*#__PURE__*/_jsxDEV(Listas, {\n        nome: ct.nome,\n        telefone: ct.telefone,\n        remover: removerContato,\n        className: \"col-6\"\n      }, chave(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true);\n}\n_s(App, \"j9kKVVDKtGVfIuwmcwxY6LUvZeM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Listas","v4","chave","App","contato","setContato","nome","telefone","listaContato","setListaContato","nomeRef","telefoneRef","novinha","setNovinha","cabeçaref","algalrinnha","agoravai","definirNome","evento","target","value","definirTelefone","adicionarContato","duplicado","find","ct","current","focus","adicionarEnter","code","localStorage","getItem","JSON","parse","setItem","stringify","limparContatos","removerContato","ctRemover","tmp","filter","map"],"sources":["C:/Users/Altamir/Desktop/Projetos/ReactJS/lista-de-contatos/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Listas from \"./listaContato\";\r\nimport { v4 as chave } from 'uuid';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport 'bootstrap/dist/js/bootstrap.bundle'\r\nimport './App.css'\r\n\r\nexport default function App() {\r\n  //states\r\n  const [contato, setContato] = useState({ nome: \"\", telefone: \"\" });\r\n  const [listaContato, setListaContato] = useState([]);\r\n  const nomeRef = useRef();\r\n  const telefoneRef = useRef();\r\n\r\n  //testando o código \r\n  const [novinha, setNovinha] = useState('')\r\n  const cabeçaref = useRef()\r\n  const algalrinnha = useRef() \r\n  const agoravai = useRef()\r\n\r\n  //metodos\r\n  function definirNome(evento) {\r\n    setContato({ ...contato, nome: evento.target.value });\r\n  }\r\n  function definirTelefone(evento) {\r\n    setContato({ ...contato, telefone: evento.target.value });\r\n  }\r\n  function adicionarContato() {\r\n    if (contato.nome === \"\" || contato.telefone === \"\") return;\r\n\r\n    // contato duplicado\r\n    let duplicado = listaContato.find(\r\n      (ct) => ct.nome === contato.nome && ct.telefone === contato.telefone\r\n    );\r\n    if (typeof duplicado !== \"undefined\") {\r\n      telefoneRef.current.focus();\r\n      return;\r\n    }\r\n    setListaContato([...listaContato, contato]);\r\n\r\n    //limpar contato\r\n    setContato({ nome: \" \", telefone: \" \" });\r\n\r\n    //focus no input nome\r\n    nomeRef.current.focus();\r\n  }\r\n\r\n  // Utilizado o enter\r\n  function adicionarEnter(evento) {\r\n    if (evento.code === \"Enter\" || evento.code === \"NumpadEnter\") {\r\n      adicionarContato();\r\n    }\r\n  }\r\n\r\n  // carregar lista de contato localstorage\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"meus_contatos\") !== null) {\r\n      setListaContato(JSON.parse(localStorage.getItem(\"meus_contatos\")));\r\n    }\r\n  }, []);\r\n  // persistencia do state\r\n  useEffect(() => {\r\n    localStorage.setItem(\"meus_contatos\", JSON.stringify(listaContato));\r\n  }, [listaContato]);\r\n  // limpar contatos\r\n  function limparContatos() {\r\n    setListaContato([])\r\n  }\r\n\r\n  // remover contato por objeto\r\n  function removerContato(ctRemover) {\r\n    let tmp = listaContato.filter(ct => ct.nome !== ctRemover.nome && ct.telefone !== ctRemover.telefone)\r\n    setListaContato(tmp)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header className=\"text-center p-4\">\r\n        <h1>Lista de contatos</h1>\r\n      </header>\r\n      <div className=\"container-fluid p-3 adicionar\">\r\n        <div className=\"my-2\">\r\n          <label htmlFor=\"\">Nome: </label> <br />\r\n          <input\r\n          className=\"form-control \"\r\n            ref={nomeRef}\r\n            type=\"text\"\r\n            onChange={definirNome}\r\n            value={contato.nome}\r\n          />\r\n        </div>\r\n        <div className=\"my-2\">\r\n          <label htmlFor=\"\">Telefone: </label> <br />\r\n          <input\r\n          className=\"form-control \"\r\n            ref={telefoneRef}\r\n            type=\"text\"\r\n            onChange={definirTelefone}\r\n            value={contato.telefone}\r\n            onKeyUp={adicionarEnter}\r\n          />\r\n        </div>\r\n        <button onClick={adicionarContato}>Adicionar contato</button>\r\n        <button onClick={limparContatos}>Limpar contatos</button>\r\n\r\n        {/* {listaContato.map(ct => {\r\n            return <componenteLista nome={ct.nome} telefone={ct.telefone}/>\r\n        })} */}\r\n      </div>\r\n      {listaContato.map((ct) => {\r\n        return (\r\n          <Listas\r\n            key={chave()}\r\n            nome={ct.nome}\r\n            telefone={ct.telefone}\r\n            remover={removerContato}\r\n            className='col-6'\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}